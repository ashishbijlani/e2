https://gist.github.com/alberto-santini/f3f8ffa1d29ffa4efab4


auto parallel_acc(uivec& v, unsigned int n) -> long unsigned int {
    auto acc = [&v] (auto from, auto to) -> long unsigned int {
        return std::accumulate(&v[from], &v[to], 0l);
    };

    auto l = v.size();
    auto f = std::vector<std::future<long unsigned int>>(n);

    for(auto i = 0u; i < n; ++i) {
        f[i] = std::async(std::launch::async, acc, l * i / n, l * (i + 1) / n);
    }

    return std::accumulate(f.begin(), f.end(), 0l, [] (auto sum, auto& fut) { return sum + fut.get(); });
}
